@{ 
    var table = Model;
    var table_name=table.table_name;
    var columns = table.columns;//列集合

    var name_space = table.name_space;
    var table_name_pascal = table.table_name_pascal;
    var table_name_camel = table.table_name_camel;
    var primary_key_name = table.primary_key_name;
    var primary_key_data_type = table.primary_key_data_type;
}

using System;
using Common.Utility.Models.HttpModels;
using System.Collections.Generic;
using System.Threading.Tasks;
using @(name_space).IRepository.IDbRepository;
using @(name_space).IServices.IDbServices;
using @(name_space).Models.DbModels;
using @(name_space).Models.RequestModels;
using @(name_space).Models.ResponeModels;

namespace @(table.name_space).Services.DbServices
{
    public class @(table_name_pascal)Service : I@(table_name_pascal)Service
    {
        /// <summary>
        /// 服务 DbServices @table.table_comment
        /// </summary>
        public @(table_name_pascal)Service()
        {
        
        }        
    
        public I@(table_name_pascal)Repository @(table_name_camel)Repository { get; set; }
        //解决依赖循环问题private { get => AutofacHelper.GetScopeService<I@(table_name_pascal)Repository>(); }


        public async Task<bool> CreateAsync(@(table_name_pascal)Model model)
        {
            return await @(table_name_camel)Repository.CreateAsync(model);
        }

        public async Task<long> DeleteAsync(@(primary_key_data_type)[] id)
        {
            return await @(table_name_camel)Repository.DeleteAsync(id);
        }

        public async Task<@(table_name_pascal)Model> GetModelAsync(@(primary_key_data_type) id, IEnumerable<string> fields = null)
        {
            return await @(table_name_camel)Repository.GetModelAsync(id, fields);
        }

        public async Task<IEnumerable<@(table_name_pascal)ResponeModel>> GetModelsAsync(@(table_name_pascal)RequestModel queryParameter, IEnumerable<string> fields = null)
        {
            return await @(table_name_camel)Repository.GetModelsAsync(queryParameter, fields);
        }

        public async Task<IEnumerable<@(table_name_pascal)ResponeModel>> GetModelsAsync(PagingModel pagingModel, @(table_name_pascal)RequestModel queryParameter, IEnumerable<string> fields = null)
        {
            return await @(table_name_camel)Repository.GetModelsAsync(pagingModel, queryParameter, fields);
        }

        public async Task<long> UpdateModelAsync(@(primary_key_data_type) id, @(table_name_pascal)Model model)
        {
            return await @(table_name_camel)Repository.UpdateModelAsync(id, model);
        }
    }
}
