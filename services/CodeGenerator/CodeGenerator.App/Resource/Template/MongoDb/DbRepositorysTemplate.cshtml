@{ 
    var table = Model;
    var table_name=table.table_name;
    var columns = table.columns;//列集合

    var name_space = table.name_space;
    var table_name_pascal = table.table_name_pascal;
    var table_name_camel = table.table_name_camel;
    var primary_key_name = table.primary_key_name;
    var primary_key_data_type = table.primary_key_data_type;
}

using @(name_space).IRepository.IDbRepository;
using @(name_space).Models.DbModels;
using @(name_space).Models.RequestModels;
using @(name_space).Models.ResponeModels;
using DataBase.IDataBase;
using Common.Utility.Extension;
using Common.Utility.Models.App;
using DataBase.MongoDb;
using MongoDB.Driver;
using MongoDB.Driver.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace @(name_space).MongoRepository.DbRepository
{
    public class @(table_name_pascal)Repository : I@(table_name_pascal)Repository
    {
       /// <summary>
       /// 资源 DbRepository @table.table_comment
       /// </summary>
       public @(table_name_pascal)Repository()
       {

       }

        public IMongoDbContext DbContext { get; set; }

        public async Task<bool> CreateAsync(@(table_name_pascal)Model model)
        {
            model._id = DbContext.PrimaryKey;
    @foreach (var col in columns)
        {
         if(col.data_type=="DateTime")
         {
          @:model.@(col.column_name) = DateTime.Now.Utc();
         }
        }
            return await DbContext.CreateAsync(model);
        }

        public async Task<bool> CreateAsync(@(table_name_pascal)Model[] models)
        {
            return await DbContext.CreateAsync(models);
        }

        public async Task<long> DeleteAsync(@(primary_key_data_type)[] id)
        {
            return await DbContext.DeleteAsync<@(primary_key_data_type), @(table_name_pascal)Model>(id);
        }

        public async Task<long> DeleteAsync(@(table_name_pascal)Model model)
        {
            return await DbContext.DeleteAsync(model);
        }

        public async Task<@(table_name_pascal)Model> GetModelAsync(@(primary_key_data_type) id)
        {
            return await DbContext.GetModelAsync<@(primary_key_data_type), @(table_name_pascal)Model>(id);
        }

        private IMongoQueryable<@(table_name_pascal)ResponeModel> GetQuery(@(table_name_pascal)RequestModel queryParameter)
        {
            var tq = DbContext.GetQueryable<@(table_name_pascal)ResponeModel>();
    @foreach (var col in columns)
        {
        if (col.column_name.EndsWith("id"))
        { 
            @:if (queryParameter.@(col.column_name).IsNull())
            @:{
            @:    tq = tq.Where(a => a.@(col.column_name) == queryParameter.@(col.column_name));
            @:}
        }
        else if(col.data_type=="string"&&!col.primary_key)
         {
            @:if (!string.IsNullOrEmpty(queryParameter.@(col.column_name)))
            @:{
            @:    tq = tq.Where(a => a.@(col.column_name).Contains(queryParameter.@(col.column_name)));
            @:}
         }
         else if(col.data_type=="int")
         {
            @:if (queryParameter.@(col.column_name)>0)
            @:{
            @:    tq = tq.Where(a => a.@(col.column_name) == queryParameter.@(col.column_name));
            @:}
         }
        
    }
            tq = tq.OrderByDescending(a => a.@(primary_key_name));
            return tq;
        }

        public async Task<IEnumerable<@(table_name_pascal)ResponeModel>> GetCurrentModelsAsync(@(table_name_pascal)RequestModel queryParameter)
        {
            return await GetQuery(queryParameter).ToListAsync();
        }

        public async Task<IEnumerable<@(table_name_pascal)ResponeModel>> GetModelsAsync(PagingModel pagingModel, @(table_name_pascal)RequestModel queryParameter)
        {
            var tq = GetQuery(queryParameter);
            pagingModel.TotalCount = await tq.LongCountAsync();
            return await tq
                .Skip(pagingModel.StartIndex()).Take(pagingModel.PageSize)
                .ToListAsync();
        }

        public async Task<long> UpdateModelAsync(@(primary_key_data_type) id, @(table_name_pascal)Model model)
        {
            return await DbContext.UpdateModelAsync(id, model);
        }

        public async Task<long> UpdateModelAsync(@(primary_key_data_type) id, @(table_name_pascal)Model model, string notFieldRegex)
        {
            return await DbContext.UpdateModelAsync(id, model, notFieldRegex);
        }
    }
}
